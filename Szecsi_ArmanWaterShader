Shader "Effect/Szecsi_ArmanWaterShader"
{
	Properties
	{
		_MainTex ("Texture", 2D) = "white" {}
		_G("G", float) = 9.8
		_Lambda1("Lambda1", float) = 2.0
		_Lambda2("Lambda2", float) = 2.0
		_Lambda3("Lambda3", float) = 2.0
		_Lambda4("Lambda4", float) = 2.0
		_Amplitude("Amplitude", Range(0.0, 0.1)) = 0.05
		_A1("A1", Range(0.0, 1.0)) = 0.5 
		_A2("A2", Range(0.0, 1.0)) = 0.5 
		_A3("A3", Range(0.0, 1.0)) = 0.5 
		_A4("A4", Range(0.0, 1.0)) = 0.5 
		_PIE("_PIE", float) = 3.14
	}
	SubShader
	{
		// No culling or depth
		Cull Off ZWrite Off ZTest Always

		Pass
		{
			CGPROGRAM
			#pragma vertex vert
			#pragma fragment frag
			
			#include "UnityCG.cginc"

			uniform sampler2D _MainTex;
			uniform float _G;
			uniform float _Lambda1;
			uniform float _Lambda2;
			uniform float _Lambda3;
			uniform float _Lambda4;
			uniform float _Amplitude;
			uniform float _A1;
			uniform float _A2;
			uniform float _A3;
			uniform float _A4;
			uniform float _PIE = 3.14;

			struct appdata
			{
				float4 vertex : POSITION;
				float2 uv : TEXCOORD0;
			};

			struct v2f
			{
				float2 uv : TEXCOORD0;
				float4 vertex : SV_POSITION;
			};

			v2f vert (appdata v)
			{
				v2f o;

				float3 direction1 = float3(1.0, 0.0, 0.0);
				float3 direction2 = float3(-1.0, 0.0, 0.0);
				float3 direction3 = float3(0.0, 0.0, 1.0);
				float3 direction4 = float3(1.0, 0.0, -1.0);

				float4 Position = v.vertex;

				//x正方向波
				float vv = sqrt(_G * _Lambda1 / (2 * _PIE));
				float psi = 2 * _PIE / _Lambda1 * (dot(v.vertex.xyz, direction1) + vv * _Time.y);
				float s = lerp( -cos(psi), sin(psi), _A1) * _Amplitude;
				Position.y += s;
				//end

				//x负方向波
				vv = sqrt(_G * _Lambda2 / (2 * _PIE));
				psi = 2 * _PIE / _Lambda2 * (dot(v.vertex.xyz, direction2) + vv * _Time.y);
				s = lerp( -cos(psi), sin(psi), _A2) * _Amplitude;
				Position.y += s;
				//end

				//z正方向波
				vv = sqrt(_G * _Lambda3 / (2 * _PIE));
				psi = 2 * _PIE / _Lambda3 * (dot(v.vertex.xyz, direction3) + vv * _Time.y);
				s = lerp( -cos(psi), sin(psi), _A3) * _Amplitude;
				Position.y += s;
				//end

				//z负方向波
				vv = sqrt(_G * _Lambda4 / (2 * _PIE));
				psi = 2 * _PIE / _Lambda4 * (dot(v.vertex.xyz, direction4) + vv * _Time.y);
				s = lerp( -cos(psi), sin(psi), _A4) * _Amplitude;
				Position.y += s;
				//end

				v.vertex.xyz = Position.xyz;

				o.vertex = mul(UNITY_MATRIX_MVP, v.vertex);
				o.uv = v.uv;
				return o;
			}

			fixed4 frag (v2f i) : SV_Target
			{
				fixed4 col = tex2D(_MainTex, i.uv);
				return col;
			}
			ENDCG
		}
	}
}
